<?php
namespace Home\Action;
class PayAction extends CommonAction{
    //在类初始化方法中，引入相关类库
    public function __construct() {
        vendor('Alipay.Corefunction');
        vendor('Alipay.Md5function');
        vendor('Alipay.Notify');
        vendor('Alipay.Submit');
    }
    public function alipayConfig(){
        $m = M("payment")->where("id=3")->find();
        $alipayConfig =array(
            'partner' => $m['txtAlipayPartner'], //这里是你在成功申请支付宝接口后获取到的PID；
            'key' => $m['txtAlipayKey'], //这里是你在成功申请支付宝接口后获取到的Key
            'sign_type' => strtoupper('MD5'),
            'input_charset' => strtolower('utf-8'),
            'cacert' => getcwd() . '\\cacert.pem',
            'transport' => 'http',
        );
        return $alipayConfig;
    }

    public function  alipay(){
        $m = M("payment")->where("id=3")->find();
        $alipay=array(
            //这里是卖家的支付宝账号，也就是你申请接口时注册的支付宝账号
            'seller_email' =>  $m['txtAlipaySellerEmail'],
            //这里是异步通知页面url，提交到项目的Pay控制器的notifyurl方法；
            'notify_url' => 'http://www.jonasverus.com/Pay/notifyurl',
            //这里是页面跳转通知url，提交到项目的Pay控制器的returnurl方法；
            'return_url' => 'http://www.jonasverus.com/Pay/returnurl',
            //支付成功跳转到的页面，我这里跳转到项目的User控制器，myorder方法，并传参payed（已支付列表）
            'successpage' => 'Order/myOrder',
            //支付失败跳转到的页面，我这里跳转到项目的User控制器，myorder方法，并传参unpay（未支付列表）
            'errorpage' => 'User/myorder?ordtype=unpay',
        );
        return $alipay;
    }


    //doalipay方法
    /* 该方法其实就是将接口文件包下alipayapi.php的内容复制过来
      然后进行相关处理
     */
    public function doalipay(){
        /*         * *******************************************************
          把alipayapi.php中复制过来的如下两段代码去掉，
          第一段是引入配置项，
          第二段是引入submit.class.php这个类。
          为什么要去掉？？
          第一，配置项的内容已经在项目的Config.php文件中进行了配置，我们只需用C函数进行调用即可；
          第二，这里调用的submit.class.php类库我们已经在PayAction的_initialize()中已经引入；所以这里不再需要；
         * *************************************************** */
        // require_once("alipay.config.php");
        // require_once("lib/alipay_submit.class.php");
        //这里我们通过TP的C函数把配置项参数读出，赋给$alipay_config；
        $alipay_config = $this->alipayConfig();
        $alipay = $this->alipay();
        /*         * ************************请求参数************************* */
        $payment_type = "1"; //支付类型 //必填，不能修改
        $notify_url = $alipay['notify_url']; //服务器异步通知页面路径
        $return_url = $alipay['return_url']; //页面跳转同步通知页面路径
        $seller_email = $alipay['seller_email']; //卖家支付宝帐户必填
        $Flag = $_POST['Flag'];
        if($Flag==1){
            $service = "alipay.wap.create.direct.pay.by.user";
        }else{
            $service = "create_direct_pay_by_user";
        }
        $out_trade_no = $_POST['WIDout_trade_no'];
        //商户网站订单系统中唯一订单号，必填
        //订单名称
        $subject = $_POST['WIDsubject'];
        //必填
        //付款金额
        $total_fee = $_POST['WIDtotal_fee'];
        //必填
        //订单描述
        $body = $_POST['WIDbody'];
        //商品展示地址
        $show_url = $_POST['WIDshow_url'];


        $anti_phishing_key = ""; //防钓鱼时间戳 //若要使用请调用类文件submit中的query_timestamp函数
        $exter_invoke_ip = get_client_ip(); //客户端的IP地址
        /*         * ********************************************************* */

        //构造要请求的参数数组，无需改动
        $parameter = array(
            "service" => $service,
            "partner" => trim($alipay_config['partner']),
            "payment_type" => $payment_type,
            "notify_url" => $notify_url,
            "return_url" => $return_url,
            "seller_email" => $seller_email,
            "seller_id" => $alipay_config['partner'],
            "out_trade_no" => $out_trade_no,
            "subject" => $subject,
            "total_fee" => $total_fee,
            "body" => $body,
            "show_url" => $show_url,
            "anti_phishing_key" => $anti_phishing_key,
            "exter_invoke_ip" => $exter_invoke_ip,
            "_input_charset" => trim(strtolower($alipay_config['input_charset']))
        );
        //建立请求
        $alipaySubmit = new \AlipaySubmit($alipay_config);
        $html_text = $alipaySubmit->buildRequestForm($parameter, "post", "确认");
        echo $html_text;
    }

    /*     * ****************************
      服务器异步通知页面方法
      其实这里就是将notify_url.php文件中的代码复制过来进行处理

     * ***************************** */

    function notifyurl() {
        /*
          同理去掉以下两句代码；
         */
        //require_once("alipay.config.php");
        //require_once("lib/alipay_notify.class.php");
        //这里还是通过C函数来读取配置项，赋值给$alipay_config
        $alipay_config = $this->alipayConfig();
        $alipay = $this->alipay();

        //计算得出通知验证结果
        $alipayNotify = new AlipayNotify($alipay_config);
        $verify_result = $alipayNotify->verifyNotify();
        if ($verify_result) {
            //验证成功
            //获取支付宝的通知返回参数，可参考技术文档中服务器异步通知参数列表
            $out_trade_no = $_POST['out_trade_no'];      //商户订单号
            $trade_no = $_POST['trade_no'];          //支付宝交易号
            $trade_status = $_POST['trade_status'];      //交易状态
            $total_fee = $_POST['total_fee'];         //交易金额
            $notify_id = $_POST['notify_id'];         //通知校验ID。
            $notify_time = $_POST['notify_time'];       //通知的发送时间。格式为yyyy-MM-dd HH:mm:ss。
            $buyer_email = $_POST['buyer_email'];       //买家支付宝帐号；
            $body   = $_POST['subject'];
            $parameter = array(
                "out_trade_no" => $out_trade_no, //商户订单编号；
                "trade_no" => $trade_no, //支付宝交易号；
                "total_fee" => $total_fee, //交易金额；
                "trade_status" => $trade_status, //交易状态
                "notify_id" => $notify_id, //通知校验ID。
                "notify_time" => $notify_time, //通知的发送时间。
                "buyer_email" => $buyer_email, //买家支付宝帐号；
                "body" => $body, //详情
            );
            @file_put_contents('./logs/alipapynotify.txt',json_encode($_POST));
            if ($_POST['trade_status'] == 'TRADE_SUCCESS') {
                $this->orderhandle($parameter);  //进行订单处理，并将从支付宝返回的参数写入数据库；
                echo "success";        //请不要修改或删除
            }
        }else{
            //验证失败
            echo "fail";
        }
    }

    /*
      页面跳转处理方法；
      这里其实就是将return_url.php这个文件中的代码复制过来，进行处理；
     */

    function returnurl(){
        //头部的处理跟上面两个方法一样，这里不罗嗦了！
        $alipay_config = $this->alipayConfig();
        $alipay = $this->alipay();

        $alipayNotify = new AlipayNotify($alipay_config); //计算得出通知验证结果
        $verify_result = $alipayNotify->verifyReturn();
        if ($verify_result){
            //验证成功
            //获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表
            $out_trade_no = $_GET['out_trade_no'];      //商户订单号
            $trade_no = $_GET['trade_no'];          //支付宝交易号
            $trade_status = $_GET['trade_status'];      //交易状态
            $total_fee = $_GET['total_fee'];         //交易金额
            $notify_id = $_GET['notify_id'];         //通知校验ID。
            $notify_time = $_GET['notify_time'];       //通知的发送时间。
            $buyer_email = $_GET['buyer_email'];       //买家支付宝帐号；
            $body = $_GET['body'];       //商品信息

            $parameter = array(
                "out_trade_no" => $out_trade_no, //商户订单编号；
                "trade_no" => $trade_no, //支付宝交易号；
                "total_fee" => $total_fee, //交易金额；
                "trade_status" => $trade_status, //交易状态
                "notify_id" => $notify_id, //通知校验ID。
                "notify_time" => $notify_time, //通知的发送时间。
                "buyer_email" => $buyer_email, //买家支付宝帐号
                "body" => $body, //详情
            );

            if ($_GET['trade_status'] == 'TRADE_FINISHED' || $_GET['trade_status'] == 'TRADE_SUCCESS') { //支付成功
                //支付成功之后跳转
                $this->redirect($alipay['successpage']); //跳转到配置项中配置的支付成功页面；
            }else{
                echo "trade_status=" . $_GET['trade_status'];
                echo "失败跳转";
            }
        }else {
            //验证失败
            //如要调试，请看alipay_notify.php页面的verifyReturn函数
            echo "支付失败！";
        }
    }

    /**
     * @time 2016/07/12
     * @function 更新状态和写入日志
     *
     */
    public function dealBackData($orderid,$tradeno){
        $Ord = M('orders');
        $querys=$Ord->where(array("orderId"=>$orderid))->find();
        $data = array();
        $data['orderNo'] = $querys['orderNo'];
        $data['tradeNo'] = $tradeno;
        $data['isPay'] = 1;
        $data['payType'] = 1;
        $data['orderStatus'] = 2;
        /**添加操作日志**/
        $userLog = M("userorderlog");
        $array = array();
        $array['userId'] = $querys['userId'];
        $array['orderId'] = $querys['orderId'];
        $array['content'] = "用户已支付、等待商家发货配送";
        $array['addTime'] = date("Y-m-d H:i:s");
        $query=$userLog->add($array);
        $Ord->where('orderNo='.$data['orderNo'])->save($data);
    }
    //处理订单函数
    //更新订单状态，写入订单支付后返回的数据
    public function orderhandle($parameter){
        if($parameter['body'] != '' && $parameter['body']!="\u5546\u54c1\u8d2d\u4e70" && $parameter['body'] !="商品购买" ){
            /************* 合并订单 批量更新数据 begin  ***********/
            //如果不为空，则其为合并订单支付
            $orderArr = explode(",", $parameter['body']);
            foreach($orderArr as $v){
                if($v == ""){continue;}
                $this->dealBackData($v,$parameter['trade_no']);
            }
            /************* 合并订单 批量更新数据 end  ***********/
        }else{
            $Ord = M('orders');
            $data = array();
            $data['orderNo'] = $parameter['out_trade_no'];
            $data['tradeNo'] = $parameter['trade_no'];
            $data['isPay'] = 1;
            $data['payType'] = 1;
            $data['orderStatus'] = 2;
            $querys=$Ord->where("orderNo=".$parameter['out_trade_no'])->find();
            /**添加操作日志**/
            $userLog = M("userorderlog");
            $array = array();
            $array['userId'] = $querys['userId'];
            $array['orderId'] = $querys['orderId'];
            $array['content'] = "用户已支付、等待商家发货配送";
            $array['addTime'] = date("Y-m-d H:i:s");
            $query=$userLog->add($array);
            $rs=$Ord->where('orderNo='.$parameter['out_trade_no'])->save($data);
            return $rs;
        }

    }

}

?>